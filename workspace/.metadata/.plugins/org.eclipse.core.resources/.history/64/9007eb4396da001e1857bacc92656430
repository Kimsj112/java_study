package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDao {
	private Connection connection;
	private PreparedStatement preparedStatement;
	private ResultSet resultSet;
	
//	아이디 중복검사
	public boolean checkId(String loginId) {
		String query = "SELECT USER_ID FROM TBL_USER WHERE LOGIN_ID = ?";
		
		try {
			//		우리가 만든 DBConnecter에서 커넥션 객체를 얻어온다.(DB와 연결 완료)
			connection = DBConnecter.getConnection();
			//		쿼리를 날리기위한 preparedStatement 객체를 커넥션 객체에서 가져온다.
			preparedStatement = connection.prepareStatement(query);
			
			//		우리가 문자열로 작성한 쿼리는 preparedStatement에 들어가서 sql명령어로 사용된다.
			//		하지만 쿼리에 ?가 있다.(미완성된 상태)
			//		?를 매개변수로 받은 loginId로 바꿔야한다.
			//		preparedStatement의 기능으로 완성시켜준다.
			//		set자료형(물음표의 순서, 넣을 값);
			preparedStatement.setString(1, loginId);
			
			//		완성된 쿼리를 실행시키는 방법
			//		1. executeQuery()
			//			SELECT 할 때 반환되는 결과 값을 받기위해 사용
			//		2. executeUpdate()
			//			SELECT를 제외하고 반환되는 값이 없으면 사용
			
			//		executeQuery()의 반환 타입은 ResultSet이다.
			resultSet = preparedStatement.executeQuery();
			
			//		resultSet은 쿼리의 결과(테이블)를 저장하고 있다.
			//		각 데이터에 접근하는 방식은 Iterator와 동일하게 커서를 사용한다.
			//		next() : 현재 커서 다음에 데이터가 존재하는지를 true/false로 반환
			//		get자료형(칼럼번호) : 커서를 다음 행으로 옮기고 해당 칼럼의 값을 자료형에 맞게 가져온다.
			if(resultSet.next()) { return false;}
	} catch (SQLException e) {
		System.out.println("checkId() SQL 오류!!");
		e.printStackTrace();
	}finally {
//		jdbc에서 제공하는 객체들은 사용 후 닫아줘야 한다.
//		오류 여부와 상관없이 반드시 닫아야하므로 finally에 작성한다.
//		닫을 때는 여는 순서와 반대로 닫는다.
		
		try {
			if(resultSet != null) {
			resultSet.close();
			}
			
			if(preparedStatement != null) {
				preparedStatement.close();
			}
			
			if(connection != null) {
				connection.close();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
		
		
		return true;
	}
}
