상속(inheritance)
1. 기존에 선언된 클래스의 맴버를 새롭게 만들 클래스에서 
사용하고 싶을 때 상속을 받고 새로운 기능만 추가함.

2. 여러 클래스 선언 시 맴버가 겹치는 경우,
부모 클래스를 먼저 선언하고 공통맴버를 자식 클래스들에게 상속해줌.

상속 문법
	class Parents{
		Parents 맴버;
	}

	class Child extends Parents {
		Parents, Child 맴버;
	}

- Parents : 부모 클래스, 슈퍼 클래스, 상위 클래스, 기반 클래스
- Child : 자식 클래스, 서브 클래스, 하위 클래스, 파생 클래스

* 주의 사항
	자바에서 상속은 단일상속만 지원함.

- super
	부모의 맴버에 접근하기 위해 사용

- super()
	부모의 생성자를 호출하기 위해 사용
	만약 super()을 작성하지 않더라도 컴파일러가 자동생성 해줌

다형성
- 메소드의 다형성
	1. 오버로딩
	2. 오버라이딩(재정의)
	부모 클래스에서 정의한 메소드를 자식 클래스에서 수정하여 사용하고 싶다면
	오버라이딩을 하면됨.
	이때 메소드명, 매개변수, 반환타입 등 메소드의 선언부는
	부모의 메소드와 동일해야함.(구현부만 수정하면 됨.)

====================================================================================
접근제한자
	1. default
	다른 패키지에서 접근 불가
	** 접근제한자를 생략하면 자동으로 default
	** 절대 default를 직접 붙이면 안됨

	2. public
	모든 곳에서 접근 가능, 대표 클래스를 의미할 때 사용

	3. protected
	다른 패키지에서 접근 불가, 자식은 접근 허용

	4. private
	다른 클래스에서 접근 불가

캡슐화
	연관된 것들끼리 묶어버리는 것
	연관된 저장공간과 기능을 묶어 하나의 클래스로 만드는 것

은닉화
	외부로부터 숨기는 것

========================================================================================
Casting
	1. up casting
	자식 값을 부모 타입으로 형변환

	2. down casting
	이미 up casting된 값을 자식 타입으로 형변환

Casting을 사용하는 이유
	- 부모타입인 하나의 저장공간에 여러 자식타입의 참조값을 업캐스팅하여 저장할 수 있음. (참조변수의 다형성)

	- 만약 하나의 기능을 하는 메소드를 만들 때 매개변수로 여러 자식타입을 받아야한다고 가정해보자,
`	캐스팅이 없었다면 자식타입을 매개변수로 받는 메소드를 타입별로 각각 만들어야함.
	 (자식끼리는 타입이 다르기 때문)
	캐스팅을 활용하면 부모타입의 매개변수를 가진 하나의 메소드만 만들면 됨.
	(부모타입의 참조변수로 모든 자식타입을 저장할 수 있기 때문)

** 주의사항 **
1. 업캐스팅으로 자식 참조값을 저장했다면 자식클래스에서 재정의한 기능이 실행됨.

2. 업캐스팅으로 자식 참조값을 저장했다면 자식클래스에 새로 구현한 기능들은 사용할 수 없음. 
이 경우 다운 캐스팅을 통해서 복구하고 사용함.

다형성
	하나의 것이 여러 형태를 가질 수 있는 성질

	- 메소드의 다형성
		1. 오버로딩
		2. 오버라이딩
	- 참조변수의 다형성(매개변수의 다형성)
		조상 클래스 타입의 참조변수로 자손 클래스 객체를 가리키는 것을 허용함(저장하는 것을 허용)

객체간 타입 비교
	- instanceof
	a instanceof A : a가 A타입이면 true, 아니면 false














































































