메소드
	기능
	이름 뒤에 소괄호
	단, 키워드 뒤에 소괄호는 메소드가 아니다.

메소드의 선언과 구현 (정의)

	리턴타입 메소드명(매개변수, ....) <-- 선언부
	{			     <-- 구현부
		실행할 명령어;
		return 리턴값;
	}

1. 리턴타입 : 반환할 값이 있다면 반환 값의 자료형을 작성한다.
		없다면 void를 작성한다.

2. 메소드명 : 동사로 작성하는것을 권장한다.
3. 매개변수 : 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언한다.
		생략이 가능하다.
4. 실행할 문장 : 메소드의 기능을 구현하는 코드를 작성한다.
5. return : 메소드를 사용한 쪽에 반환할 값을 작성한다.
	    생략이 가능하며, 리턴 값이 있다면 메소드를 사용한 코드를 값으로 본다.
	    리턴값이 없다면 값이 아니다.
	    return이 실행되면 메소드가 종료된다.

메소드의 정의와 사용
1. 메소드를 정의할 때에는 {}가 있고, 반드시 메소드 밖에서 정의한다.
2. 메소드를 사용할 때에는 {}가 없고, 반드시 메소드 안에서 사용한다.

메소드의 정의 순서
1. 기능을 생각한다.(숫자를 더해주는 기능)
2. 반환타입이 생각나지 않는다면 우선 void로 작성한다.
	void
3. 기능에 알맞은 메소드 명을 작성한다.
	void addNum(){

	}
4. 매개변수를 생각한다.
   내가 만드려는 기능에 필요한 값을 외부에서 전달받아야하는지 생각한다.
	void addNum(int num1, int num2){

	}
5. 실행할 문장을 작성한다.
	void addNum(int num1, int num2){
		int result = num1 + num2;
	}	
6. 리턴 값을 생각한다.
	int addNum(int num1, int num2){
		int result = num1 + num2;
		return result;
	}


메소드를 사용하는 이유
	1. 중복된 코드의 제거
	2. 높은 재사용성
	3. 유지보수에 유리함


메소드의 인자와 매개변수
	매개변수, parameter : 메소드를 만들때 ()안에서 선언하는 변수
	인수, 인자, argument : 메소드를 사용할 때 ()로 넘겨주는 값