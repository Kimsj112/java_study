추상 메소드 
	- 메소드를 선언만 하고 구현을 하지않은 것을 추상 메서드라고 함.
	(미완성된 메서드)
	- ex) abstract 리턴타입 메소드명(매개변수,..);
		1. abstract 키워드를 사용
		2. 마지막에 세미콜론을 사용

추상 클래스
	- abstract 키워드가 붙은 클래스
	- 추상 메서드가 한 개 이상 있는 클래스는 반드시 추상 클래스로 선언해야함.(미완성된 클래스)

	abstract class 클래스명{
		abstract 리턴타입 메소드명(매개변수,...);
		**일반 메소드도 선언 가능**
	}

	** 추상 클래스는 객체화 시킬 수 없다. **
	** 미완성된 메소드는 상속받은 자식 클래스에서 반드시 재정의하여 구현을 해야만
	해당 자식 클래스를 객체화 할 수 있음.
	그러므로 [강제성]을 부여하기 위해 추상 메소드로 선언함.

===========================================================================================

인터페이스(interface)
	일종의 추상 클래스이지만 클래스라고 부르지 않고 추상화의 정도가 높음.
	맴버로 상수와 추상메소드만 가질 수 있음.(기본적으로는)
	인터페이스는 객체화 할 수 없으며, 
	인터페이스는 다른 클래스에서 구현(implements)해서 사용함.(상속과 비슷함)
	
인터페이스의 선언
	interface 인터페이스명{
		맴버 선언;
	}

인터페이스의 맴버
	1. 모든 필드는 public static final이 붙음. (생략해도 자동으로 붙음.)
	2. 모든 메소드는 public abstract이 붙음. (생략해도 자동으로 붙음.)

클래스의 상속과 인터페이스 구현
	1. 클래스는 단일 상속만 가능하며, 인터페이스는 다중 구현이 가능함.
	2. 상속과 구현은 별개임.
	   즉, 하나의 클래스에 상소과 구현을 동시에 할 수 있음.
	3. 인터페이스는 인터페이스를 상속(extends) 할 수 있음.

인터페이스를 사용하는 이유
	1. 여러 클래스에서 선언할 맴버들을 일관되게 하기 위해 사용(표준화)
	2. 관계없는 클래스들을 그룹화 시키기 위해 사용(마커 인터페이스)

인터페이스의 불편함
	인터페이스는 강제성이 강하기 때문에 구현하는 클래스에서 일부만 재정의하여 사용하는게 불가능함.

어댑터 클래스(추상 클래스)
	인터페이스의 강제성을 완화시키기 위해 사용함.
	어댑터 클래스는 추상 클래스로 만들기때문에 미구현된 메소드와 구현된 메소드가 동시에 존재할 수 있음.
	그러므로 어댑터 클래스에서 인터페이스를 상속받아 강제성을 없애고 싶은 메소드만 재정의 해줌.

인터페이스의 추가된 문법 (jdk 8부터 추가)
	1. default 메소드를 선언할 수 있음
	2. static 메소드를 선언할 수 있음
	3. private 메소드를 선언할 수 있음(jdk 9부터 사용 가능)

다중 상속
	여러 부모 클래스를 상속하는 것을 다중 상속이라고 함.	
	JAVA에서는 모호성 때문에 다중 상속을 지원하지 않음.
	
	하지만 JDK 8버전 부터는 인터페이스에 default메소드 등을 만드는 것을 허용함.
	(특정 메소드의 구현을 허용함.)
	여러 개를 구현할 수 있는 인터페이스 특징 때문에 다중 상속을 지원하는것이나 다름없게 되었음.

모호성(ambiguity)
	하나의 자식이 여러 부모를 상속받을 때 서로 다른 부모 클래스에 동일한 이름의 맴버가 있다면,
	어떤 부모의 맴버르 상속받을지 알 수 없음.

마커 인터페이스(Marker Interface)
	클래스들을 그룹화하기 위한 목적으로 사용함.
	서로 다른 클래스들을 공통되는 타입을 갖도록 하는 것이 유일한 목적이기 때문에
	마커 인터페이스는 어떠한 맴버도 선언하지 않음. 






















































	